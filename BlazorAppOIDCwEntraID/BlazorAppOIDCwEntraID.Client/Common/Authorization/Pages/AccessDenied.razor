@attribute [Route(RouteConstants.AccessDeniedPath)]
@attribute [Authorize]

@inject NavigationManager NavigationManager

<h3>Not Authorized</h3>

<p>Insufficient permission.</p>

@if (!string.IsNullOrWhiteSpace(ReturnUrl) && IsSafeLocalPath(ReturnUrl))
{
    <NavLink href="@ReturnUrl" /> // Safe to redirect
}

@code {
    string ReturnUrl { get; set; } = string.Empty;

    private bool IsSafeLocalPath(string url)
    {
        // Decode the URL from URL-encoded form
        var decodedUrl = System.Net.WebUtility.UrlDecode(url);

        // Check if the decoded URL is a local path
        // It should start with '/' but not "//" or "/\"
        if (decodedUrl.StartsWith("/") && !decodedUrl.StartsWith("//") && !decodedUrl.StartsWith("/\\"))
        {
            return true;
        }

        // Additional checks can be made to ensure that the URL is allowed or registered within the application.

        return false;
    }
}
