@implements IDisposable
@inject NavigationManager NavigationManager

@if (isAuthenticated)
{
    <form action="@RouteConstants.LogoutPath" method="post">
        <AntiforgeryToken />
        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
        <button type="submit" class="nav-link">
            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
        </button>
    </form>
}

@code {
    [CascadingParameter] Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    bool isAuthenticated;
    string? currentUrl;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        if (AuthenticationStateTask != null)
        {
            var authState = await AuthenticationStateTask;
            isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
